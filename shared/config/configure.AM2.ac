AC_INIT([AM2], [])

AC_CONFIG_SRCDIR([atmos_drivers/coupled/atmos_model.F90])
AC_CONFIG_MACRO_DIR([m4])

AC_LANG([Fortran])
AC_FC_SRCEXT([f90])
AX_MPI([], [
  AC_MSG_ERROR([Could not find MPI launcher.])
])
AC_SUBST(FC, $MPIFC)
AC_SUBST(LD, $MPIFC)


# netCDF configuration

# Search for the Fortran netCDF module.
AX_FC_CHECK_MODULE([netcdf], [], [
  AS_UNSET([ax_fc_cv_mod_netcdf])
  AC_PATH_PROG([NF_CONFIG], [nf-config])
  AS_IF([test -n "$NF_CONFIG"], [
    AC_SUBST([FCFLAGS], ["$FCFLAGS -I$($NF_CONFIG --includedir)"])
    ], [AC_MSG_ERROR([Could not find nf-config.])]
  )
  AX_FC_CHECK_MODULE([netcdf], [], [
    AC_MSG_ERROR([Could not find netcdf module.])
  ])
])

# Confirm that the Fortran compiler can link the netCDF C library
AX_FC_CHECK_C_LIB([netcdf], [nc_create], [], [
  AS_UNSET([ax_fc_cv_c_lib_netcdf_nc_create])
  AC_PATH_PROG([NC_CONFIG], [nc-config])
  AS_IF([test -n "$NC_CONFIG"], [
    AC_SUBST([LDFLAGS], ["$LDFLAGS -L$($NC_CONFIG --libdir)"])
  ], [
    AC_MSG_ERROR([Could not find nc-config.])
  ])
  AX_FC_CHECK_C_LIB([netcdf], [nc_create], [], [
    AC_MSG_ERROR([Could not find netCDF C library.])
  ])
])

# Confirm that the Fortran compiler can link to the netCDF Fortran library.
# NOTE:
#   - We test nf_create, rather than nf90_create, since AX_FC_CHECK_LIB can
#     not currently probe the Fortran 90 interfaces.
#   - nf-config does not have --libdir, so we parse the --flibs output.
AX_FC_CHECK_LIB([netcdff], [nf_create], [], [], [
  AS_UNSET([ax_fc_cv_lib_netcdff_nf_create])
  AC_PATH_PROG([NF_CONFIG], [nf-config])
  AS_IF([test -n "$NF_CONFIG"], [
    AC_SUBST([LDFLAGS],
      ["$LDFLAGS $($NF_CONFIG --flibs | xargs -n1 | grep "^-L" | sort -u | xargs)"]
    )
  ], [
    AC_MSG_ERROR([Could not find nf-config.])
  ])
  AX_FC_CHECK_LIB([netcdff], [nf_create], [], [], [
    AC_MSG_ERROR([Could not find netCDF Fortran library.])
  ])
])


# Force 8-byte reals
AX_FC_REAL8
AS_IF(
  [test "$enable_real8" != no],
  [FCFLAGS="$FCFLAGS $REAL8_FCFLAGS"])

# Unlimited line length
# NOTE: AC_FC_LINE_LENGTH was added in 2.67.
m4_version_prereq([2.67],
  [AC_FC_LINE_LENGTH([unlimited])],
  [AX_FC_LINE_LENGTH([unlimited])]
)

# Allow argument mismatch (for functions lacking interfaces)
AX_FC_ALLOW_ARG_MISMATCH
FCFLAGS="$FCFLAGS $ALLOW_ARG_MISMATCH_FCFLAGS"

# Enable Cray pointers
AX_FC_CRAY_POINTER


# FMS support

# Test for fms_mod to verify FMS module access
AX_FC_CHECK_MODULE([fms_mod], [], [
  AS_UNSET([ax_fc_cv_mod_fms_mod])
  AX_FC_CHECK_MODULE([fms_mod],
    [AC_SUBST([FCFLAGS], ["-I${srcdir}/ac/deps/include $FCFLAGS"])],
    [AC_MSG_ERROR([Could not find fms_mod Fortran module.])],
    [-I${srcdir}/ac/deps/include])
])

# Test for fms_init to verify FMS library linking
AX_FC_CHECK_LIB([FMS], [fms_init], [fms_mod],
  [], [
    AS_UNSET([ax_fc_cv_lib_FMS_fms_init])
    AX_FC_CHECK_LIB([FMS], [fms_init], [fms_mod], [
      AC_SUBST([LDFLAGS], ["-L${srcdir}/ac/deps/lib $LDFLAGS"])
      AC_SUBST([LIBS], ["-lFMS $LIBS"])
    ],
    [AC_MSG_ERROR([Could not find FMS library.])],
    [-L${srcdir}/ac/deps/lib])
  ]
)

# Verify that FMS is at least 2019.01.02
# NOTE: 2019.01.02 introduced two changes:
#   - diag_axis_init supports an optional domain_position argument
#   - position values NORTH, EAST, CENTER were added to diag_axis_mod
# For our versioning test, we check the second feature.
AC_MSG_CHECKING([if diag_axis_mod supports domain positions])
AC_COMPILE_IFELSE(
  [AC_LANG_PROGRAM([], [use diag_axis_mod, only: NORTH, EAST, CENTER])],
  [AC_MSG_RESULT([yes])],
  [
    AC_MSG_RESULT([no])
    AC_MSG_ERROR([diag_axis_mod in MOM6 requires FMS 2019.01.02 or newer.])
  ]
)


# Verify that Python is available
AC_PATH_PROGS([PYTHON], [python python3 python2], [
  AC_MSG_ERROR([Could not find python.])
])
AC_ARG_VAR([PYTHON], [Python interpreter command])


# Verify that makedep is available
AC_PATH_PROGS([MAKEDEP], [makedep], [], ["${PATH}:${srcdir}/../MOM6/ac"])
AS_IF([test -n "${MAKEDEP}"], [
  AC_SUBST([MAKEDEP])
], [
  AC_MSG_ERROR(["Could not find makedep."])
])

AC_DEFINE([SPMD])
AC_DEFINE([use_AM3_physics])

# Autoconf does not configure the archiver (ar), as it is handled by Automake.
# TODO: Properly configure this tool.  For now, we hard-set this to `ar`.
AR=ar
ARFLAGS=rv
AC_SUBST([AR])
AC_SUBST([ARFLAGS])

# Generate source list and configure dependency command
SRCDIRS="${SRCDIRS:-${srcdir}}"
AC_SUBST([SRCDIRS])
AC_CONFIG_COMMANDS([Makefile.dep], [make depend])

# Populate the unused config parameters
AC_SUBST([CPPFLAGS])
AC_SUBST([CC])
AC_SUBST([CFLAGS])

LIBTARGET=libAM2.a
AC_SUBST([LIBTARGET])

# Prepare output
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
